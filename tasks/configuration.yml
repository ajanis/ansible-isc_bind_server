---

- name: Ensure bind config directory is present with correct permissions
  file:
    path: "{{ isc_bind_server_confpath }}"
    state: directory
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777

- name: Copy named conf file
  template:
    src: named.conf.j2
    dest: "{{ isc_bind_server_confpath }}/named.conf"
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777
  notify: restart named

- name: Copy rndc.key file
  template:
    src: rndc.key.j2
    dest: "{{ isc_bind_server_rndc_path }}"
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777
  notify: restart named

- name: Check for ISC Bind Server subnets PTR files
  stat:
    path: "{{ isc_bind_server_confpath }}/{{ ( item | ipaddr('revdns') ).split('.')[1:] | join('.') }}db"
  register: isc_subnet_files
  loop: "{{ isc_bind_server_subnets }}"
  when:
    - isc_bind_server_subnets is defined
    - isc_bind_server_subnets != None

- name: Create reverse file for any ISC Bind Server subnets
  template:
    src: db.reverse.j2
    dest: "{{ isc_bind_server_confpath }}/{{ ( item.item | ipaddr('revdns') ).split('.')[1:] | join('.') }}db"
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777
  notify: restart named
  loop: "{{ isc_subnet_files.results }}"
  vars:
    net: "{{ item.item }}"
  when:
    - isc_bind_server_subnets is defined
    - isc_bind_server_subnets != None
    - not item.stat.exists

- name: Check for Foreman Proxy subnets PTR files
  stat:
    path: "{{ isc_bind_server_confpath }}/{{ ( item | ipaddr('revdns') ).split('.')[1:] | join('.') }}db"
  register: foreman_subnet_files
  loop: "{{ foreman_proxy_dhcp_subnets | map(attribute='network') | map('regex_replace','^([0-9]+\\.[0-9]+\\.[0-9]+).*$','\\1') | unique | list }}"
  when:
    - foreman_proxy_dhcp_subnets is defined
    - foreman_proxy_dhcp_subnets != None

- name: Create reverse file for any Foreman Proxy subnets
  template:
    src: db.reverse.j2
    dest: "{{ isc_bind_server_confpath }}/{{ ( item.item | ipaddr('revdns') ).split('.')[1:] | join('.') }}db"
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777
  notify: restart named
  loop: "{{ foreman_subnet_files.results }}"
  vars:
    net: "{{ item.item }}"
  when:
    - foreman_proxy_dhcp_subnets is defined
    - foreman_proxy_dhcp_subnets != None
    - not item.stat.exists

- name: Check for Forward DNS files
  stat:
    path: "{{ isc_bind_server_confpath }}/{{ item }}.db"
  register: isc_zone_files
  loop: "{{ isc_bind_server_domains }}"
  when:
    - isc_bind_server_domains is defined
    - isc_bind_server_domains != None

- name: Copy forward file
  template:
    src: db.forward.j2
    dest: "{{ isc_bind_server_confpath }}/{{ item.item }}.db"
    owner: "{{ isc_bind_server_user }}"
    group: "{{ isc_bind_server_group }}"
    mode: 0777
  notify: restart named
  loop: "{{ isc_zone_files.results }}"
  vars:
    domain: "{{ item.item }}"
  when:
    - isc_bind_server_domains is defined
    - isc_bind_server_domains != None
    - not item.stat.exists

- meta: flush_handlers

- name: Restart Bind9 service
  systemd:
    name: "{{ isc_bind_server_service }}"
    state: restarted
    enabled: yes
  register: bind9_restarted
  when: require_named_restart | default(False)

- name: Verify Bind9 service is listening
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 53
    delay: 5
  ignore_errors: yes
  register: bind9_start_attempt

- name: Get bind9 journald logs if service does not appear to be up
  shell: "journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value {{ isc_bind_server_service }}.service`"
  register: bind9_journal
  when: bind9_start_attempt.failed

- debug:
    var: |
      bind9_journal.stdout_lines
  when: bind9_start_attempt.failed
  failed_when: bind9_start_attempt.failed
